{{- if .Values.extsecret.enabled -}}
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ include "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation
  {{- if .Values.commonAnnotations }}
  {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  refreshInterval: 30m
  secretStoreRef:
    name: secret-store
    kind: SecretStore
  target:
    name: {{ include "common.names.fullname" . }}
  {{- if .Values.extsecret.single.enabled }}
  data:
    {{- range $name, $map := .Values.extsecret.list }}
    {{- $key := pluck $.Values.global.env $map.host | first | default $map.host._default }}
    - secretKey: {{ .name }}
      remoteRef:
        key: {{ $key }}
        property: {{ .path }}
    {{- end }}
  {{- end }}
  {{- if .Values.extsecret.multiple.enabled }}
  dataFrom:
    {{- range $name, $map :=  .Values.extsecret.list }}
    {{- $key := pluck $.Values.global.env $map.key | first | default $map.key._default }}
    - extract:
      key: {{ $key }}
      property: {{ .path }}
    {{- end }}
  {{- end }}
{{- end }}
